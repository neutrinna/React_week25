1. В компонент передаются атрибуты `description` и `title` . Могу ли я их сложить как на примере,
 чтобы получить одну строку и вывести в компоненте?
    
    ```jsx
    import React from "react";
    import styles from './button.css'
    
    export default class Example extends React.Component {
        render() {
    				let {description,title} = this.props
    				title += description; //title = title + description
             return (
                <span>{title}</span>
            );
        }
    }
    ```
- Если суть вопроса заключается в "будет ли что-то отрисовано", при передаче в props строковых
 значений в переменные description и title, они будут сложены по правилам JS (конкатенированы).
Единственное, что вызывает сомнение, устраивает ли автора примера, что description и title будут слеплены вместе
    
2. С помощью какого метода можно отловить изменение `props`?
- shouldComponentUpdate()

3. Оператор расширения часто используется также для клонирования объекта.
Подумайте, чем отличаются эти две записи и какую проблему решает здесь оператор расширения:
    
    ```jsx
    const initialObj = { title:'Hello', text:'World' }
    
    //№1
    const firstObj = initialObj
    
    //№2
    const secondObj = {...initialObj}
    ```
- При первом способе клонирования объекты initialObj и firstObj будут ссылаться на одну область памяти,
и при изменении одного из объектов, изменения затронут обоих. Второй способ лишен этого недостатка
    
4. В каком из методов жизненного цикла лучше всего использовать методы вызова API и обращения к веб-хранилищам,
 если они должны быть вызваны всего один раз при загрузке страницы?
- в componentDidMount()

5. С помощью какого метода можно отловить и отрисовать для пользователя возникшую в компоненте ошибку?
- componentDidCatch()

6. Какой код обычно пишут в конструкторе? Для каких задач он используется?
- конструктор в React-компоненте используется для определения состояния или привязки методов

7. Что делает функция `render`()? Что может её вызвать?
- функция render() отвечает за отрисовку компонента. Вызвать ее может:
а)создание компонента
б)перерисовка родительского компонента при условии, что изменения затронули наш компонент 
в)изменение state
г)вызов this.forceUpdate

8. Что нужно изменить в коде из урока (видео), чтобы начальные параметры у компонента приходили из пропсов,
 но если пропсы вообще не заданы, начальные значения были инициализированы нулями?
 - добавить запись:
 static defaultProps = {
    minutes: 0,
    seconds: 0
 }

9. Можно ли несколько раз использовать хук `useEffect` внутри одного компонента?
- да, это разрешено и рекомендуется в случае разных вариантов использования

10. Можно ли не передавать второй аргумент в хук `useEffect`? Что тогда произойдёт?
- функция обратного вызова будет выполняться при каждом рендеринге

11. Что означает возвращение функции в теле хука `useEffect`? 
- это имитация работы метода componentWillUnmount в функциональном компоненте

12. Будут ли перерисованы дочерние элементы компонента при вызове метода `forceUpdate`()?
- да, если для дочерних компонентов shouldComponentUpdate() вернет true